{
	"swagger": "2.0",
	"info": {
		"description": "The following are details outlying the final projects for the APIs and Microservices [certification](https://www.freecodecamp.org/certification/fcc4893b047-b5d0-472e-b76e-3805d9ed0aba/apis-and-microservices) from [FreeCodeCamp.org](http://www.freecodecamp.org). \nThe specific libraries covered in the course work include Node.js, Express, MongoDB and Mongoose. As a parallel effort to this work, I picked up the Jest test framework to write all my validation tests for each end point. Finally, I spent some considerable time building an API Container [boilerplate](https://github.com/elchicofrommo/chicoexpress) which provided logging, testing, and transpiling that I used for each of the projects below.\nOf all the certifications I went through on [FreeCodeCamp.org](http://www.freecodecamp.org) I feel the most confident in the validity of this certification. Already having extensive experience delivering an API gateway at American Eagle Outfitters with Node.js and Express, I was pleased to see many of the core connects were presented in the course work and that the certification tests do accurately validate a student's ability to apply those topics to an engineering solution.\nAnother observation I would make is that the requirements definitions for each project are extremely vague. Normally during a story walk though I would never allow a team to accept a story with such low resolution. But in the case of the course work I found that it actually forced me (the student) to think though the consequences of different design choices in trying to \"guess\" product's intent. \nPlease consider contributing to [FreeCodeCamp.org](http://www.freecodecamp.org)so it may continue to provide free access to educational material for software development. I really believe in their mission. What's more, they are a 501 3c so your donation is tax deductible.",
		"version": "1.0.0",
		"title": "FCC Microservice APIs",
		"termsOfService": "http://swagger.io/terms/",
		"contact": {
			"email": "mariofiltered9783@gmail.com"
		},
		"license": {
			"name": "Apache 2.0",
			"url": "http://www.apache.org/licenses/LICENSE-2.0.html"
		}
	},
	"host": "api.bit-word.com",
	"basePath": "/api",
	"tags": [{
		"name": "timestamp",
		"description": "A Single end point that returns the timestamp of the API server",
		"externalDocs": {
			"description": "- [Project Requirements](https://www.freecodecamp.org/learn/apis-and-microservices/apis-and-microservices-projects/timestamp-microservice)\n- [GitHub Repo](https://github.com/elchicofrommo/fcc_microservices_timestamp)"
		}
	}, {
		"name": "whoami",
		"description": "A Service that returns the some Header details of the API call in the response object.",
		"externalDocs": {
			"description": "- [Project Requirements](https://www.freecodecamp.org/learn/apis-and-microservices/apis-and-microservices-projects/request-header-parser-microservice)\n- [GitHub Repo](https://github.com/elchicofrommo/fcc_microservices_headerparser)"
		}
	}, {
		"name": "shorturl",
		"description": "Services around generating short urls performing 302 redirects. ",
		"externalDocs": {
			"description": "- [Project Requirements](https://www.freecodecamp.org/learn/apis-and-microservices/apis-and-microservices-projects/url-shortener-microservice)\n- [GitHub Repo](https://github.com/elchicofrommo/fcc_microservices_shorturl)"
		}
	}, {
		"name": "exercise",
		"description": "A collection of routes to create a user, add an exercise event to that user, and to see all exercise events for a user.",
		"externalDocs": {
			"description": "- [Project Requirements](https://www.freecodecamp.org/learn/apis-and-microservices/apis-and-microservices-projects/exercise-tracker)\n- [GitHub Repo](https://github.com/elchicofrommo/fcc_microservices_fitness)"
		}
	}, {
		"name": "filemetadata",
		"description": "A single route that analizes an uploaded file and returns information about that file.",
		"externalDocs": {
			"description": "- [Project Requirements](https://www.freecodecamp.org/learn/apis-and-microservices/apis-and-microservices-projects/file-metadata-microservice)\n- [GitHub Repo](fcc_microservice_filemetadata)"
		}
	}],
	"schemes": ["https"],
	"paths": {
		"/timestamp/{timestamp}": {
			"get": {
				"tags": ["timestamp"],
				"summary": "returns a formatted timestamp from the server using the date ",
				"operationId": "timestamp",
				"produces": ["application/json"],
				"parameters": [{
					"name": "timestamp",
					"in": "path",
					"type": "string",
					"description": "If present, a date string that can be parsed by new Date(string)",
					"required": true
				}]

			}
		},
		"/shorturl/new": {
			"post": {
				"tags": ["shorturl"],
				"summary": "creates a new short key mapping for the provided url",
				"operationId": "newShortUrl",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "URL to map to short url key",
					"required": true,
					"schema": {
						"type": "object",
						"properties": {
							"url": {
								"type": "string"
							}
						}
					}

				}]

			}
		},
		"/shorturl/{short_url_key}": {
			"get": {
				"tags": ["shorturl"],
				"summary": "creates a new short url mapping for the provided url",
				"operationId": "findURLByKey",
				"produces": ["application/json"],
				"parameters": [{
					"in": "path",
					"name": "short_url_key",
					"type": "string",
					"description": "Look up the real URL for this short_url_key",
					"required": true
				}]
			}
		},
		"/whoami": {
			"get": {
				"tags": ["whoami"],
				"summary": "returns details based on the requets headers you send",
				"operationId": "whoami",
				"produces": ["application/json"]

			}
		},
		"/exercise/new-user": {
			"post": {
				"tags": ["exercise"],
				"summary": "creates a new user to track ",
				"operationId": "newExerciseUser",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "The username to create",
					"required": true,
					"schema": {
						"type": "object",
						"properties": {
							"userId": {
								"type": "string"
							}
						}
					}

				}]

			}
		},
		"/exercise/add": {
			"post": {
				"tags": ["exercise"],
				"summary": "creates a new short key mapping for the provided url",
				"operationId": "addNewExercise",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "body",
					"type": "string",
					"description": "User to add an exercise event to",
					"required": true,
					"schema": {
								"type": "object",
								"properties": {
									"userId": {
										"type": "string"
									},

									"date": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"duration": {
										"type": "string"
									}
								}
								
							}

				}]
			}
		},
		"/exercise/log": {
			"get": {
				"tags": ["exercise"],
				"summary": "Retrieve all the exercise events for a user within a date rage",
				"operationId": "getExercisesByUser",
				"produces": ["application/json"],
				"parameters": [{
						"name": "userId",
						"in": "query",
						"type": "string",
						"description": "The name to search for",
						"required": true
					},
					{
						"name": "from",
						"in": "query",
						"type": "string",
						"description": "All events should come after this date ",
						"required": false
					},
					{
						"name": "to",
						"in": "query",
						"type": "string",
						"description": "All events should come before this date",
						"required": false
					},
					{
						"name": "limit",
						"in": "query",
						"type": "string",
						"description": "A limit to the number of entries to return ",
						"required": false
					}
				]
			}
		},
		"/fileanalyse": {
            "post": {
                "tags": ["filemetadata"],
                "summary": "uploads an a file for analysis",
                "description": "",
                "operationId": "fileanalyse",
                "consumes": ["multipart/form-data"],
                "produces": ["application/json"],
                "parameters": [{
                    "name": "upfile",
                    "in": "formData",
                    "description": "file to upload",
                    "required": false,
                    "type": "file"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            }
        }
	},

	"definitions": {
		"ApiResponse": {
			"type": "object",
			"properties": {
				"code": {
					"type": "integer",
					"format": "int32"
				},
				"type": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"Category": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"name": {
					"type": "string"
				}
			},
			"xml": {
				"name": "Category"
			}
		},
		"Pet": {
			"type": "object",
			"required": ["name", "photoUrls"],
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"category": {
					"$ref": "#/definitions/Category"
				},
				"name": {
					"type": "string",
					"example": "doggie"
				},
				"photoUrls": {
					"type": "array",
					"xml": {
						"wrapped": true
					},
					"items": {
						"type": "string",
						"xml": {
							"name": "photoUrl"
						}
					}
				},
				"tags": {
					"type": "array",
					"xml": {
						"wrapped": true
					},
					"items": {
						"xml": {
							"name": "tag"
						},
						"$ref": "#/definitions/Tag"
					}
				},
				"status": {
					"type": "string",
					"description": "pet status in the store",
					"enum": ["available", "pending", "sold"]
				}
			},
			"xml": {
				"name": "Pet"
			}
		},
		"Tag": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"name": {
					"type": "string"
				}
			},
			"xml": {
				"name": "Tag"
			}
		},
		"Order": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"petId": {
					"type": "integer",
					"format": "int64"
				},
				"quantity": {
					"type": "integer",
					"format": "int32"
				},
				"shipDate": {
					"type": "string",
					"format": "date-time"
				},
				"status": {
					"type": "string",
					"description": "Order Status",
					"enum": ["placed", "approved", "delivered"]
				},
				"complete": {
					"type": "boolean"
				}
			},
			"xml": {
				"name": "Order"
			}
		},
		"User": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"username": {
					"type": "string"
				},
				"firstName": {
					"type": "string"
				},
				"lastName": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"password": {
					"type": "string"
				},
				"phone": {
					"type": "string"
				},
				"userStatus": {
					"type": "integer",
					"format": "int32",
					"description": "User Status"
				}
			},
			"xml": {
				"name": "User"
			}
		}
	},
	"externalDocs": {
		"description": "Find out more about Swagger",
		"url": "http://swagger.io"
	},
	"comments": {
		"api": {

			"/pet": {
				"post": {
					"tags": ["pet"],
					"summary": "Add a new pet to the store",
					"description": "",
					"operationId": "addPet",
					"consumes": ["application/json", "application/xml"],
					"produces": ["application/json", "application/xml"],
					"parameters": [{
						"in": "body",
						"name": "body",
						"description": "Pet object that needs to be added to the store",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Pet"
						}
					}],
					"responses": {
						"405": {
							"description": "Invalid input"
						}
					},
					"security": [{
						"petstore_auth": ["write:pets", "read:pets"]
					}]
				},
				"put": {
					"tags": ["pet"],
					"summary": "Update an existing pet",
					"description": "",
					"operationId": "updatePet",
					"consumes": ["application/json", "application/xml"],
					"produces": ["application/json", "application/xml"],
					"parameters": [{
						"in": "body",
						"name": "body",
						"description": "Pet object that needs to be added to the store",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Pet"
						}
					}],
					"responses": {
						"400": {
							"description": "Invalid ID supplied"
						},
						"404": {
							"description": "Pet not found"
						},
						"405": {
							"description": "Validation exception"
						}
					},
					"security": [{
						"petstore_auth": ["write:pets", "read:pets"]
					}]
				}
			},
			"/pet/findByStatus": {
				"get": {
					"tags": ["pet"],
					"summary": "Finds Pets by status",
					"description": "Multiple status values can be provided with comma separated strings",
					"operationId": "findPetsByStatus",
					"produces": ["application/json", "application/xml"],
					"parameters": [{
						"name": "status",
						"in": "query",
						"description": "Status values that need to be considered for filter",
						"required": true,
						"type": "array",
						"items": {
							"type": "string",
							"enum": ["available", "pending", "sold"],
							"default": "available"
						},
						"collectionFormat": "multi"
					}],
					"responses": {
						"200": {
							"description": "successful operation",
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/Pet"
								}
							}
						},
						"400": {
							"description": "Invalid status value"
						}
					},
					"security": [{
						"petstore_auth": ["write:pets", "read:pets"]
					}]
				}
			},
			"/pet/findByTags": {
				"get": {
					"tags": ["pet"],
					"summary": "Finds Pets by tags",
					"description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
					"operationId": "findPetsByTags",
					"produces": ["application/json", "application/xml"],
					"parameters": [{
						"name": "tags",
						"in": "query",
						"description": "Tags to filter by",
						"required": true,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi"
					}],
					"responses": {
						"200": {
							"description": "successful operation",
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/Pet"
								}
							}
						},
						"400": {
							"description": "Invalid tag value"
						}
					},
					"security": [{
						"petstore_auth": ["write:pets", "read:pets"]
					}],
					"deprecated": true
				}
			},
			"/pet/{petId}": {
				"get": {
					"tags": ["pet"],
					"summary": "Find pet by ID",
					"description": "Returns a single pet",
					"operationId": "getPetById",
					"produces": ["application/json", "application/xml"],
					"parameters": [{
						"name": "petId",
						"in": "path",
						"description": "ID of pet to return",
						"required": true,
						"type": "integer",
						"format": "int64"
					}],
					"responses": {
						"200": {
							"description": "successful operation",
							"schema": {
								"$ref": "#/definitions/Pet"
							}
						},
						"400": {
							"description": "Invalid ID supplied"
						},
						"404": {
							"description": "Pet not found"
						}
					},
					"security": [{
						"api_key": []
					}]
				},
				"post": {
					"tags": ["pet"],
					"summary": "Updates a pet in the store with form data",
					"description": "",
					"operationId": "updatePetWithForm",
					"consumes": ["application/x-www-form-urlencoded"],
					"produces": ["application/json", "application/xml"],
					"parameters": [{
						"name": "petId",
						"in": "path",
						"description": "ID of pet that needs to be updated",
						"required": true,
						"type": "integer",
						"format": "int64"
					}, {
						"name": "name",
						"in": "formData",
						"description": "Updated name of the pet",
						"required": false,
						"type": "string"
					}, {
						"name": "status",
						"in": "formData",
						"description": "Updated status of the pet",
						"required": false,
						"type": "string"
					}],
					"responses": {
						"405": {
							"description": "Invalid input"
						}
					},
					"security": [{
						"petstore_auth": ["write:pets", "read:pets"]
					}]
				},
				"delete": {
					"tags": ["pet"],
					"summary": "Deletes a pet",
					"description": "",
					"operationId": "deletePet",
					"produces": ["application/json", "application/xml"],
					"parameters": [{
						"name": "api_key",
						"in": "header",
						"required": false,
						"type": "string"
					}, {
						"name": "petId",
						"in": "path",
						"description": "Pet id to delete",
						"required": true,
						"type": "integer",
						"format": "int64"
					}],
					"responses": {
						"400": {
							"description": "Invalid ID supplied"
						},
						"404": {
							"description": "Pet not found"
						}
					},
					"security": [{
						"petstore_auth": ["write:pets", "read:pets"]
					}]
				}
			},
			"/store/order": {
				"post": {
					"tags": ["store"],
					"summary": "Place an order for a pet",
					"description": "",
					"operationId": "placeOrder",
					"consumes": ["application/json"],
					"produces": ["application/json", "application/xml"],
					"parameters": [{
						"in": "body",
						"name": "body",
						"description": "order placed for purchasing the pet",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Order"
						}
					}],
					"responses": {
						"200": {
							"description": "successful operation",
							"schema": {
								"$ref": "#/definitions/Order"
							}
						},
						"400": {
							"description": "Invalid Order"
						}
					}
				}
			},
			"/store/order/{orderId}": {
				"get": {
					"tags": ["store"],
					"summary": "Find purchase order by ID",
					"description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
					"operationId": "getOrderById",
					"produces": ["application/json", "application/xml"],
					"parameters": [{
						"name": "orderId",
						"in": "path",
						"description": "ID of pet that needs to be fetched",
						"required": true,
						"type": "integer",
						"maximum": 10,
						"minimum": 1,
						"format": "int64"
					}],
					"responses": {
						"200": {
							"description": "successful operation",
							"schema": {
								"$ref": "#/definitions/Order"
							}
						},
						"400": {
							"description": "Invalid ID supplied"
						},
						"404": {
							"description": "Order not found"
						}
					}
				},
				"delete": {
					"tags": ["store"],
					"summary": "Delete purchase order by ID",
					"description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
					"operationId": "deleteOrder",
					"produces": ["application/json", "application/xml"],
					"parameters": [{
						"name": "orderId",
						"in": "path",
						"description": "ID of the order that needs to be deleted",
						"required": true,
						"type": "integer",
						"minimum": 1,
						"format": "int64"
					}],
					"responses": {
						"400": {
							"description": "Invalid ID supplied"
						},
						"404": {
							"description": "Order not found"
						}
					}
				}
			},
			"/store/inventory": {
				"get": {
					"tags": ["store"],
					"summary": "Returns pet inventories by status",
					"description": "Returns a map of status codes to quantities",
					"operationId": "getInventory",
					"produces": ["application/json"],
					"parameters": [],
					"responses": {
						"200": {
							"description": "successful operation",
							"schema": {
								"type": "object",
								"additionalProperties": {
									"type": "integer",
									"format": "int32"
								}
							}
						}
					},
					"security": [{
						"api_key": []
					}]
				}
			},
			"/user/createWithArray": {
				"post": {
					"tags": ["user"],
					"summary": "Creates list of users with given input array",
					"description": "",
					"operationId": "createUsersWithArrayInput",
					"consumes": ["application/json"],
					"produces": ["application/json", "application/xml"],
					"parameters": [{
						"in": "body",
						"name": "body",
						"description": "List of user object",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/User"
							}
						}
					}],
					"responses": {
						"default": {
							"description": "successful operation"
						}
					}
				}
			},
			"/user/createWithList": {
				"post": {
					"tags": ["user"],
					"summary": "Creates list of users with given input array",
					"description": "",
					"operationId": "createUsersWithListInput",
					"consumes": ["application/json"],
					"produces": ["application/json", "application/xml"],
					"parameters": [{
						"in": "body",
						"name": "body",
						"description": "List of user object",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/User"
							}
						}
					}],
					"responses": {
						"default": {
							"description": "successful operation"
						}
					}
				}
			},
			"/user/{username}": {
				"get": {
					"tags": ["user"],
					"summary": "Get user by user name",
					"description": "",
					"operationId": "getUserByName",
					"produces": ["application/json", "application/xml"],
					"parameters": [{
						"name": "username",
						"in": "path",
						"description": "The name that needs to be fetched. Use user1 for testing. ",
						"required": true,
						"type": "string"
					}],
					"responses": {
						"200": {
							"description": "successful operation",
							"schema": {
								"$ref": "#/definitions/User"
							}
						},
						"400": {
							"description": "Invalid username supplied"
						},
						"404": {
							"description": "User not found"
						}
					}
				},
				"put": {
					"tags": ["user"],
					"summary": "Updated user",
					"description": "This can only be done by the logged in user.",
					"operationId": "updateUser",
					"consumes": ["application/json"],
					"produces": ["application/json", "application/xml"],
					"parameters": [{
						"name": "username",
						"in": "path",
						"description": "name that need to be updated",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": "Updated user object",
						"required": true,
						"schema": {
							"$ref": "#/definitions/User"
						}
					}],
					"responses": {
						"400": {
							"description": "Invalid user supplied"
						},
						"404": {
							"description": "User not found"
						}
					}
				},
				"delete": {
					"tags": ["user"],
					"summary": "Delete user",
					"description": "This can only be done by the logged in user.",
					"operationId": "deleteUser",
					"produces": ["application/json", "application/xml"],
					"parameters": [{
						"name": "username",
						"in": "path",
						"description": "The name that needs to be deleted",
						"required": true,
						"type": "string"
					}],
					"responses": {
						"400": {
							"description": "Invalid username supplied"
						},
						"404": {
							"description": "User not found"
						}
					}
				}
			},
			"/user/login": {
				"get": {
					"tags": ["user"],
					"summary": "Logs user into the system",
					"description": "",
					"operationId": "loginUser",
					"produces": ["application/json", "application/xml"],
					"parameters": [{
						"name": "username",
						"in": "query",
						"description": "The user name for login",
						"required": true,
						"type": "string"
					}, {
						"name": "password",
						"in": "query",
						"description": "The password for login in clear text",
						"required": true,
						"type": "string"
					}],
					"responses": {
						"200": {
							"description": "successful operation",
							"headers": {
								"X-Expires-After": {
									"type": "string",
									"format": "date-time",
									"description": "date in UTC when token expires"
								},
								"X-Rate-Limit": {
									"type": "integer",
									"format": "int32",
									"description": "calls per hour allowed by the user"
								}
							},
							"schema": {
								"type": "string"
							}
						},
						"400": {
							"description": "Invalid username/password supplied"
						}
					}
				}
			},
			"/user/logout": {
				"get": {
					"tags": ["user"],
					"summary": "Logs out current logged in user session",
					"description": "",
					"operationId": "logoutUser",
					"produces": ["application/json", "application/xml"],
					"parameters": [],
					"responses": {
						"default": {
							"description": "successful operation"
						}
					}
				}
			},
			"/user": {
				"post": {
					"tags": ["user"],
					"summary": "Create user",
					"description": "This can only be done by the logged in user.",
					"operationId": "createUser",
					"consumes": ["application/json"],
					"produces": ["application/json", "application/xml"],
					"parameters": [{
						"in": "body",
						"name": "body",
						"description": "Created user object",
						"required": true,
						"schema": {
							"$ref": "#/definitions/User"
						}
					}],
					"responses": {
						"default": {
							"description": "successful operation"
						}
					}
				}
			}
		},
		"securityDefinitions": {
			"api_key": {
				"type": "apiKey",
				"name": "api_key",
				"in": "header"
			},
			"petstore_auth": {
				"type": "oauth2",
				"authorizationUrl": "https://petstore.swagger.io/oauth/authorize",
				"flow": "implicit",
				"scopes": {
					"read:pets": "read your pets",
					"write:pets": "modify pets in your account"
				}
			}
		}
	}
}